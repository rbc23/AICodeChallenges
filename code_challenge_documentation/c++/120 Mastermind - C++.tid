title:120 Mastermind - C++
tags: C++

```cpp
cpp
#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>

// Function to generate random secret code
std::vector<int> generateSecretCode(int codeLength, int codeRange) {
    std::vector<int> secretCode;
    std::srand(std::time(0)); // Seed the random number generator

    for (int i = 0; i < codeLength; i++) {
        int digit = std::rand() % codeRange; // Generate random digit
        secretCode.push_back(digit); // Add digit to secret code
    }

    return secretCode;
}

// Function to evaluate the guess and provide feedback
void evaluateGuess(const std::vector<int>& secretCode, const std::vector<int>& guess, int& numCorrectDigits, int& numCorrectPositions) {
    numCorrectDigits = 0;
    numCorrectPositions = 0;

    // Count the number of correct digits
    std::vector<int> codeFreq(10, 0);
    std::vector<int> guessFreq(10, 0);

    for (int i = 0; i < secretCode.size(); i++) {
        codeFreq[secretCode[i]]++;
        guessFreq[guess[i]]++;

        if (secretCode[i] == guess[i]) {
            numCorrectPositions++;
        }
    }

    for (int i = 0; i < 10; i++) {
        numCorrectDigits += std::min(codeFreq[i], guessFreq[i]);
    }

    numCorrectDigits -= numCorrectPositions;
}

int main() {
    int codeLength = 4; // Length of the secret code
    int codeRange = 6; // Range of possible digits in the secret code

    std::vector<int> secretCode = generateSecretCode(codeLength, codeRange); // Generate random secret code

    std::cout << "Welcome to Mastermind!" << std::endl;
    std::cout << "Guess the " << codeLength << "-digit code with digits from 0 to " << codeRange-1 << std::endl;

    int numCorrectDigits = 0; // Number of correct digits in the guess
    int numCorrectPositions = 0; // Number of correct digits in the correct positions

    while (numCorrectPositions < codeLength) {
        std::vector<int> guess;

        std::cout << "Enter your guess: ";

        // Read user input for guess
        int digit;
        for (int i = 0; i < codeLength; i++) {
            std::cin >> digit;
            guess.push_back(digit);
        }

        evaluateGuess(secretCode, guess, numCorrectDigits, numCorrectPositions);

        // Provide feedback to the user
        std::cout << "Correct digits: " << numCorrectDigits << std::endl;
        std::cout << "Correct positions: " << numCorrectPositions << std::endl;
    }

    std::cout << "Congratulations! You cracked the code!" << std::endl;

    return 0;
}

```