title:17 Breakout - C++
tags: C++

```cpp
c++
#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <iostream>
#include <vector>

struct Ball {
    sf::CircleShape shape;
    sf::Vector2f direction;
    float speed;

    Ball(float radius, sf::Vector2f startPos) {
        shape.setRadius(radius);
        shape.setPosition(startPos);
        shape.setFillColor(sf::Color::Yellow);
        shape.setOrigin(radius, radius);
        direction = sf::Vector2f(1.0f, 1.0f);
        speed = 5.0f;
    }
};

struct Paddle {
    sf::RectangleShape shape;

    Paddle(sf::Vector2f size, sf::Vector2f startPos) {
        shape.setSize(size);
        shape.setPosition(startPos);
        shape.setFillColor(sf::Color::Green);
        shape.setOrigin(size.x / 2.0f, size.y / 2.0f);
    }
};

struct Brick {
    sf::RectangleShape shape;

    Brick(sf::Vector2f size, sf::Vector2f position) {
        shape.setSize(size);
        shape.setPosition(position);
        shape.setFillColor(sf::Color::Red);
        shape.setOrigin(size.x / 2.0f, size.y / 2.0f);
    }
};

int main() {
    const int windowWidth = 800;
    const int windowHeight = 600;
    sf::RenderWindow window(sf::VideoMode(windowWidth, windowHeight), "Breakout Clone");
    window.setFramerateLimit(60);

    std::vector<Brick> bricks;
    sf::Vector2f brickSize(60.0f, 20.0f);
    sf::Vector2f brickPosition(40.0f, 50.0f);
    int numBricksX = 10;
    int numBricksY = 4;

    for (int i = 0; i < numBricksX; i++) {
        for (int j = 0; j < numBricksY; j++) {
            bricks.emplace_back(brickSize, brickPosition + sf::Vector2f(i * (brickSize.x + 10.0f), j * (brickSize.y + 5.0f)));
        }
    }

    Paddle paddle(sf::Vector2f(100.0f, 20.0f), sf::Vector2f(windowWidth / 2.0f, windowHeight - 30.0f));

    Ball ball(10.0f, sf::Vector2f(windowWidth / 2.0f, windowHeight - 50.0f));

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }
        }

        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Left) && paddle.shape.getPosition().x - paddle.shape.getSize().x / 2 > 0) {
            paddle.shape.move(-5.0f, 0.0f);
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Right) && paddle.shape.getPosition().x + paddle.shape.getSize().x / 2 < windowWidth) {
            paddle.shape.move(5.0f, 0.0f);
        }

        ball.shape.move(ball.speed * ball.direction.x, ball.speed * ball.direction.y);

        // Collision with walls
        if (ball.shape.getPosition().x - ball.shape.getRadius() < 0 || ball.shape.getPosition().x + ball.shape.getRadius() > windowWidth) {
            ball.direction.x *= -1.0f;
        }
        if (ball.shape.getPosition().y - ball.shape.getRadius() < 0) {
            ball.direction.y *= -1.0f;
        }
        if (ball.shape.getPosition().y + ball.shape.getRadius() > windowHeight) {
            // Restart game
            ball.shape.setPosition(windowWidth / 2.0f, windowHeight - 50.0f);
            ball.direction = sf::Vector2f(1.0f, 1.0f);
        }

        // Collision with paddle
        if (ball.shape.getGlobalBounds().intersects(paddle.shape.getGlobalBounds())) {
            ball.direction.y *= -1.0f;
        }

        // Collision with bricks
        for (int i = 0; i < bricks.size(); i++) {
            if (ball.shape.getGlobalBounds().intersects(bricks[i].shape.getGlobalBounds())) {
                bricks.erase(bricks.begin() + i);
                ball.direction.y *= -1.0f;
                break;
            }
        }

        window.clear(sf::Color::Black);

        for (const Brick& brick : bricks) {
            window.draw(brick.shape);
        }

        window.draw(paddle.shape);
        window.draw(ball.shape);
        window.display();
    }

    return 0;
}

```