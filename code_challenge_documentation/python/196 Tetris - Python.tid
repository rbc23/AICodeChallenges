title:196 Tetris - Python
tags: Python

```Python
import pygame
import random

# Initialize game
pygame.init()
clock = pygame.time.Clock()

# Game window size
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Tetris Clone")

# Colors
black = (0, 0, 0)
white = (255, 255, 255)
red = (255, 0, 0)
green = (0, 255, 0)
blue = (0, 0, 255)
cyan = (0, 255, 255)
yellow = (255, 255, 0)
purple = (255, 0, 255)
orange = (255, 165, 0)

# Tetrimino shapes
tetriminos = [
    [[1, 1, 1, 1]],
    [[1, 1], [1, 1]],
    [[0, 1, 1], [1, 1, 0]],
    [[1, 1, 0], [0, 1, 1]],
    [[1, 0, 0], [1, 1, 1]],
    [[0, 0, 1], [1, 1, 1]],
    [[1, 1, 1], [0, 1, 0]]
]

# Tetrimino colors
tetrimino_colors = [cyan, yellow, purple, orange, blue, green, red]

# Tetrimino class
class Tetrimino:
    def __init__(self, shape, color):
        self.shape = shape
        self.color = color
        self.row = 0
        self.col = screen_width // 2 // 30

    def draw(self):
        for i in range(len(self.shape)):
            for j in range(len(self.shape[i])):
                if self.shape[i][j] == 1:
                    pygame.draw.rect(screen, self.color, (self.col * 30 + j * 30, self.row * 30 + i * 30, 30, 30))

    def move(self, direction):
        if direction == "right":
            self.col += 1
        elif direction == "left":
            self.col -= 1

    def rotate(self):
        self.shape = list(zip(*self.shape[::-1]))

# Game variables
fall_time = 0
fall_speed = 0.5
game_over = False
game_grid = [[black for _ in range(10)] for _ in range(20)]
current_tetrimino = Tetrimino(random.choice(tetriminos), random.choice(tetrimino_colors))

# Game loop
while not game_over:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            game_over = True
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                current_tetrimino.move("left")
            elif event.key == pygame.K_RIGHT:
                current_tetrimino.move("right")
            elif event.key == pygame.K_UP:
                current_tetrimino.rotate()

    screen.fill(black)

    # Update fall time and move tetrimino down
    fall_time += clock.get_rawtime()
    if fall_time / 1000 >= fall_speed:
        current_tetrimino.row += 1
        fall_time = 0

    # Check collision and stick tetrimino to the grid
    if (current_tetrimino.row + len(current_tetrimino.shape)) >= 20:
        for i in range(len(current_tetrimino.shape)):
            for j in range(len(current_tetrimino.shape[i])):
                if current_tetrimino.shape[i][j] == 1:
                    game_grid[current_tetrimino.row + i][current_tetrimino.col + j] = current_tetrimino.color
        current_tetrimino = Tetrimino(random.choice(tetriminos), random.choice(tetrimino_colors))

    # Draw tetrimino
    current_tetrimino.draw()

    # Draw grid
    for i in range(len(game_grid)):
        for j in range(len(game_grid[i])):
            pygame.draw.rect(screen, game_grid[i][j], (j * 30, i * 30, 30, 30))

    pygame.display.flip()
    clock.tick(60)

pygame.quit()
```