title:124 Minesweeper - C#
tags: C#

```csharp
using System;

namespace Minesweeper
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Welcome to Minesweeper!");
            Console.WriteLine("Enter the size of the board:");
            int size = int.Parse(Console.ReadLine());

            // Initialize the game board
            char[,] board = new char[size, size];
            InitializeBoard(board);

            // Generate random mines on the board
            Random random = new Random();
            int numberOfMines = size * size / 4;
            PlaceMines(board, random, numberOfMines);

            // Play the game until all mines are found or a mine is clicked
            bool gameOver = false;
            int minesFound = 0;
            int totalMines = numberOfMines;

            while (!gameOver)
            {
                Console.Clear();
                PrintBoard(board);
                Console.WriteLine($"Mines found: {minesFound} / {totalMines}");
                Console.WriteLine("Enter the row and column (separated by a space):");
                string[] input = Console.ReadLine().Split(' ');
                int row = int.Parse(input[0]);
                int col = int.Parse(input[1]);

                if (IsValidMove(board, row, col))
                {
                    if (IsMine(board, row, col))
                    {
                        Console.Clear();
                        PrintBoard(board);
                        Console.WriteLine("Game over! You stepped on a mine...");
                        gameOver = true;
                    }
                    else
                    {
                        int adjacentMines = CountAdjacentMines(board, row, col);
                        board[row, col] = adjacentMines.ToString()[0];
                        if (adjacentMines == 0)
                        {
                            UncoverAdjacentTiles(board, row, col);
                        }
                    }

                    if (minesFound == totalMines)
                    {
                        Console.Clear();
                        PrintBoard(board);
                        Console.WriteLine("Congratulations! You found all the mines!");
                        gameOver = true;
                    }
                }
            }
        }

        static void InitializeBoard(char[,] board)
        {
            for (int row = 0; row < board.GetLength(0); row++)
            {
                for (int col = 0; col < board.GetLength(1); col++)
                {
                    board[row, col] = '-';
                }
            }
        }

        static void PlaceMines(char[,] board, Random random, int numberOfMines)
        {
            int minesPlaced = 0;

            while (minesPlaced < numberOfMines)
            {
                int row = random.Next(board.GetLength(0));
                int col = random.Next(board.GetLength(1));

                if (board[row, col] != 'X')
                {
                    board[row, col] = 'X';
                    minesPlaced++;
                }
            }
        }

        static void PrintBoard(char[,] board)
        {
            Console.WriteLine("  0 1 2 3 4 5 6 7 8 9");

            for (int row = 0; row < board.GetLength(0); row++)
            {
                Console.Write(row + " ");
                for (int col = 0; col < board.GetLength(1); col++)
                {
                    Console.Write(board[row, col] + " ");
                }
                Console.WriteLine();
            }
        }

        static bool IsValidMove(char[,] board, int row, int col)
        {
            return row >= 0 && row < board.GetLength(0)
                && col >= 0 && col < board.GetLength(1)
                && board[row, col] == '-';
        }

        static bool IsMine(char[,] board, int row, int col)
        {
            return board[row, col] == 'X';
        }

        static int CountAdjacentMines(char[,] board, int row, int col)
        {
            int count = 0;

            for (int i = row - 1; i <= row + 1; i++)
            {
                for (int j = col - 1; j <= col + 1; j++)
                {
                    if (i >= 0 && i < board.GetLength(0)
                        && j >= 0 && j < board.GetLength(1)
                        && board[i, j] == 'X')
                    {
                        count++;
                    }
                }
            }

            return count;
        }

        static void UncoverAdjacentTiles(char[,] board, int row, int col)
        {
            for (int i = row - 1; i <= row + 1; i++)
            {
                for (int j = col - 1; j <= col + 1; j++)
                {
                    if (i >= 0 && i < board.GetLength(0)
                        && j >= 0 && j < board.GetLength(1)
                        && board[i, j] == '-')
                    {
                        int adjacentMines = CountAdjacentMines(board, i, j);
                        board[i, j] = adjacentMines.ToString()[0];
                        if (adjacentMines == 0)
                        {
                            UncoverAdjacentTiles(board, i, j);
                        }
                    }
                }
            }
        }
    }
}
```