title:183 Snake - JavaScript
tags: JavaScript

```JavaScript
javascript
// Define constants
const BOARD_SIZE = 20;
const CELL_SIZE = 20;
const GAME_SPEED = 100;

// Create variables
let canvas;
let context;
let snake;
let food;
let direction;

// Initialize the game
function init() {
  canvas = document.getElementById('game');
  context = canvas.getContext('2d');
  
  // Set initial direction
  direction = 'right';
  
  // Create the snake
  snake = {
    body: [
      { x: 6, y: 5 },
      { x: 5, y: 5 },
      { x: 4, y: 5 }
    ],
    color: '#00FF00'
  };
  
  // Generate food
  generateFood();
  
  // Start the game loop
  gameLoop();
}

// Generate food at a free random position on the board
function generateFood() {
  let x = Math.floor(Math.random() * BOARD_SIZE);
  let y = Math.floor(Math.random() * BOARD_SIZE);
  
  // Check if the generated position is already occupied by the snake
  for (let i = 0; i < snake.body.length; i++) {
    if (snake.body[i].x === x && snake.body[i].y === y) {
      return generateFood();
    }
  }
  
  food = { x, y, color: '#FF0000' };
}

// Update the position and state of the snake
function updateSnake() {
  // Create a new head for the snake
  let head = { x: snake.body[0].x, y: snake.body[0].y };
  
  // Update the head based on the current direction
  if (direction === 'right') {
    head.x++;
  } else if (direction === 'left') {
    head.x--;
  } else if (direction === 'up') {
    head.y--;
  } else if (direction === 'down') {
    head.y++;
  }
  
  // Check for collision with walls or other parts of the snake
  if (
    head.x < 0 ||
    head.x >= BOARD_SIZE ||
    head.y < 0 ||
    head.y >= BOARD_SIZE ||
    checkCollision(head)
  ) {
    // Game over
    gameOver();
    return;
  }
  
  // Check for collision with food
  if (head.x === food.x && head.y === food.y) {
    // Increase the length of the snake
    snake.body.push({});
    
    // Generate new food
    generateFood();
  } else {
    // Remove the tail of the snake
    snake.body.pop();
  }
  
  // Move the head to the front of the body
  snake.body.unshift(head);
}

// Check for collision with other parts of the snake
function checkCollision(head) {
  for (let i = 1; i < snake.body.length; i++) {
    if (snake.body[i].x === head.x && snake.body[i].y === head.y) {
      return true;
    }
  }
  return false;
}

// Update the game state and render
function gameLoop() {
  // Update the snake
  updateSnake();
  
  // Clear the canvas
  context.clearRect(0, 0, canvas.width, canvas.height);
  
  // Render the snake
  renderSnake();
  
  // Render the food
  renderFood();
  
  // Continue the game loop
  setTimeout(gameLoop, GAME_SPEED);
}

// Render the snake on the canvas
function renderSnake() {
  for (let i = 0; i < snake.body.length; i++) {
    let cell = snake.body[i];
    context.fillStyle = snake.color;
    context.fillRect(cell.x * CELL_SIZE, cell.y * CELL_SIZE, CELL_SIZE, CELL_SIZE);
  }
}

// Render the food on the canvas
function renderFood() {
  context.fillStyle = food.color;
  context.fillRect(food.x * CELL_SIZE, food.y * CELL_SIZE, CELL_SIZE, CELL_SIZE);
}

// Handle keydown events to change the direction of the snake
document.addEventListener('keydown', function(event) {
  if (event.key === 'ArrowRight' && direction !== 'left') {
    direction = 'right';
  } else if (event.key === 'ArrowLeft' && direction !== 'right') {
    direction = 'left';
  } else if (event.key === 'ArrowUp' && direction !== 'down') {
    direction = 'up';
  } else if (event.key === 'ArrowDown' && direction !== 'up') {
    direction = 'down';
  }
});

// Show game over message
function gameOver() {
  alert('Game Over');
  // Restart the game
  init();
}

// Start the game
init();

```